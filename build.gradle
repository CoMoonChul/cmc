plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.openapi.generator" version "7.8.0"
}

group = 'com.sw'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.slf4j', module: 'slf4j-simple'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 기본 의존성 정보
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Open api & swagger
	implementation 'org.openapitools:openapi-generator:7.0.0'
	implementation 'org.openapitools:openapi-generator-gradle-plugin:7.0.0'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	// spring doc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'

	// Validation
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Model Mapper
	implementation 'org.modelmapper:modelmapper:3.1.1'

	// Owasp Html Sanitizer
	implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.1'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Data base
	testRuntimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java:8.0.33'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// .env
	implementation 'io.github.cdimascio:dotenv-java:3.0.2'

	// web socket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	developmentOnly 'org.springframework.boot:spring-boot-devtools' // 테스트용
	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'


	// open ai api
	implementation 'io.github.flashvayne:chatgpt-spring-boot-starter:1.0.4'

	// spring security
//	implementation 'org.springframework.security:spring-security-core'
//	implementation 'org.springframework.security:spring-security-config'
//	implementation 'org.springframework.security:spring-security-web'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'

	// query logging
	implementation 'p6spy:p6spy:3.9.1'
	implementation 'com.github.gavlyukovskiy:datasource-decorator-spring-boot-autoconfigure:1.9.2'

	// email send
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'commons-validator:commons-validator:1.7'
}

tasks.named('test') {
	enabled = false
}

def cmcSwaggerMap = [
		"user" : "user.yaml",
		"comment": "comment.yaml",
		"view": "view.yaml",
		"review": "review.yaml",
		"battle": "battle.yaml",
		"like": "like.yaml",
		"notice": "notice.yaml",
		"livecoding": "livecoding.yaml",
		"redis": "redis.yaml",
		"editor": "editor.yaml",
		"group" : "group.yaml",
]

cmcSwaggerMap.each { entry ->
	tasks.register("opnApiGenerate-cmc-${entry.key}", org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
		generatorName.set("spring")
		importMappings = [
				'ServerHttpRequest': 'org.springframework.http.server.reactive.ServerHttpRequest',
				'ServerHttpResponse': 'org.springframework.http.server.reactive.ServerHttpResponse'
		]
		inputSpec.set("$rootDir/src/main/resources/openapi_cmc/${entry.value}")
		outputDir.set(project.file("$buildDir/generated-sources").absolutePath)
		apiPackage.set("com.sw.cmc.adapter.in.${entry.key}.web")
		modelPackage.set("com.sw.cmc.adapter.in.${entry.key}.dto")
		configOptions.set(
				[
						interfaceOnly         : "true",
						useBeanValidation     : "true",
						performBeanValidation : "true",
						serializableModel     : "true",
						sourceFolder          : "/java",
						implFolder            : "/java",
						unhandledException    : "true",
						useTags               : "true",
				]
		)
	}
}


tasks.register("openApiGenerateCmcServer") {
	dependsOn cmcSwaggerMap.collect { "opnApiGenerate-cmc-${it.key}" }
}

tasks.register("openApiGenerateAll") {
	dependsOn("openApiGenerateCmcServer")
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java", "build/generated-sources/java"]
		}
	}
}


compileJava.dependsOn(tasks.openApiGenerateAll)